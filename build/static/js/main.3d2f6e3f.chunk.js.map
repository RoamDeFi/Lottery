{"version":3,"sources":["components/FancyButton.tsx","assets/ROAM.gif","components/Dashboard.tsx","components/ConnectWallet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FancyButton","props","Button","variant","disabled","onClick","onButtonClick","text","Dashboard","Container","className","Row","Col","enterFunction","walletConnected","drawFunction","src","GIF","alt","userBalance","getPaidFunction","ConnectWallet","addressFormatted","walletAddress","length","substring","connectWallet","ERROR_CODE_TX_REJECTED_BY_USER","contractAddress","_provider","undefined","App","useState","selectedAddress","setSelectedAddress","balance","setBalance","setTxBeingSent","setTransactionError","networkError","setNetworkError","setWalletConnected","_lotto","setLotto","useEffect","_initializeEthers","_viewWinnings","a","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","addr","lottoInstantiate","Contract","LotteryArtifact","abi","_initialize","userAddress","_resetState","_connectWallet","request","method","networkVersion","console","log","on","newAddress","viewWinnings","utils","formatEther","_enter","enter","value","parseEther","tx","hash","wait","status","Error","code","error","_draw","draw","_getPaid","getPaid","viewWinningsFunction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d2f6e3f.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\n\ninterface ButtonProps {\n  text?: string;\n  disabled?: boolean;\n  onButtonClick?: ()=>{};\n}\n\nconst FancyButton = ({...props}:ButtonProps) => {\n  return (\n    <Button variant=\"primary\" disabled={props.disabled} onClick={props.onButtonClick}>\n      {props.text}\n    </Button>\n  );\n}\n\nexport default FancyButton;","export default __webpack_public_path__ + \"static/media/ROAM.bfb3edf2.gif\";","import { Container, Row, Col } from 'react-bootstrap';\nimport FancyButton from './FancyButton';\nimport GIF from '../assets/ROAM.gif';\n\nimport '../styling/Dashboard.css';\n\ninterface Props {\n  walletConnected: boolean,\n  enterFunction: any,\n  drawFunction: any,\n  getPaidFunction: any,\n  userBalance: any,\n  viewWinningsFunction: any,\n}\n\nfunction Dashboard(props:Props) {\n  return (\n    <Container>\n      <div className=\"dash-container\">\n        <Row>\n          <Col>\n            {/* enter: displays ticket number */}\n            <FancyButton text={\"BUY TICKET\"} onButtonClick={props.enterFunction} disabled={!props.walletConnected}/>\n          </Col>\n          <Col>\n            {/* draw: displays winning addresses */}\n            <FancyButton text={\"DRAW WINNER\"} onButtonClick={props.drawFunction} disabled={!props.walletConnected}/>\n            {/*<div><p>Text</p></div>*/}\n          </Col>\n        </Row>\n        {/*}\n        <Row>\n          <Col>\n          {/*\n            <div>User Balance: {props.userBalance}</div>\n            *\n            <FancyButton text={\"View Winnings\"} onButtonClick={props.viewWinningsFunction}/>\n            \n          </Col>\n        </Row>\n        */}\n        <Row>\n          <Col>\n            <img src={GIF} alt={\"trippy ROAM gif\"}/>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col>\n            <div>{props.userBalance}</div>\n            {/* enable: once winner is drawn */}\n            <FancyButton text={\"CLAIM PRIZE\"} onButtonClick={props.getPaidFunction} disabled={!props.walletConnected}/>\n          </Col>\n        </Row>\n      </div>\n     </Container>\n  );\n}\n\nexport default Dashboard;","import FancyButton from './FancyButton';\n\ninterface Props {\n\tconnectWallet: any,\n\twalletConnected: boolean,\n\twalletAddress: any,\n}\n\nfunction ConnectWallet(props:Props) {\n  let addressFormatted = \"\";\n\n  if (typeof props.walletAddress !== \"undefined\"){\n    if (props.walletAddress.length === 42 ) {\n      addressFormatted = props.walletAddress.substring(0,6) + \"...\" + props.walletAddress.substring(38,42);\n    }\n  }\n\n  return (\n    <FancyButton text={props.walletConnected ? addressFormatted : \"FANTOM CONNECT\"} onButtonClick={props.connectWallet}/>\n  );\n  \n}\n\nexport default ConnectWallet;","import {ethers} from 'ethers';\nimport React, { useState, useEffect } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Dashboard from './components/Dashboard';\nimport ConnectWallet from './components/ConnectWallet';\n\nimport LotteryArtifact from \"./artifacts/contracts/FantomLottery.sol/FantomLottery.json\";\n\nimport './styling/App.css';\n\nconst HARDHAT_NETWORK_ID = '31337';\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n// replace the Lotto value with the one shown after running the deploy script\nconst contractAddress = {'Lotto':'0xecB1BDc02eD102815B18269dF3306E7f5902eA8E'};\n\ndeclare const window: any;\n\nlet _provider:any = undefined;\n\nfunction App () {\n  const [selectedAddress, setSelectedAddress] = useState<String|undefined>(\"\");\n  const [balance, setBalance] = useState<String|undefined>(undefined);\n  const [, setTxBeingSent] = useState(undefined); // remove: txBeingSent\n  const [, setTransactionError] = useState(undefined); // remove: transactionError\n  const [networkError, setNetworkError] = useState<String|undefined>(undefined);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [_lotto, setLotto] = useState<any>(undefined);\n\n  useEffect(() => {\n    _initializeEthers();\n  }, []);\n\n  // this is to show the winnings after the lotto has been instantiated\n  useEffect(() => {\n    _viewWinnings();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_lotto]);\n\n  useEffect(() => {\n    if (selectedAddress === undefined) {\n      setWalletConnected(false);\n      setBalance(\"0.0\");\n    }\n  }, [selectedAddress]);\n\n\n  const _initializeEthers = async () => {\n    _provider = new ethers.providers.Web3Provider(window.ethereum);\n    try {\n      const signer = _provider.getSigner(0);\n      const addr = await signer.getAddress();\n      const lottoInstantiate = new ethers.Contract(\n        contractAddress.Lotto,\n        LotteryArtifact.abi,\n        signer\n      );\n      setLotto(lottoInstantiate);\n      setWalletConnected(true);\n      setSelectedAddress(addr);\n    } catch (error) {\n      return;\n    }\n  }\n\n  const _checkNetwork = () => {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n    setNetworkError('Please connect Metamask to Localhost:8545');\n    return false;\n  }\n\n  const _initialize = (userAddress:any) => {\n    setSelectedAddress(userAddress);\n    _initializeEthers();\n  }\n\n  const _resetState = () => {\n    setSelectedAddress(undefined);\n    setBalance(undefined);\n    setTxBeingSent(undefined);\n    setTransactionError(undefined);\n    setNetworkError(undefined);\n    setWalletConnected(false);\n  }\n\n  const _connectWallet = async () => {\n    const [selectedAddress] = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n    if (!_checkNetwork()) {\n      console.log(networkError);\n      return;\n    }\n\n    _initialize(selectedAddress);\n    setWalletConnected(true);\n    window.ethereum.on(\"accountsChanged\", ([newAddress]:any[]) => {\n      if (newAddress === undefined) {\n        return _resetState();\n      }\n      _initialize(newAddress);\n    });\n\n    window.ethereum.on(\"chainChanged\", ([chainId]:any[]) => {\n      _resetState();\n    });\n  }\n\n  const _viewWinnings = async () => {\n    try {\n      const balance = await _lotto.viewWinnings();\n      setBalance(ethers.utils.formatEther(balance));\n    } catch(error) {\n      setBalance(\"\");\n    }\n  }\n\n  const _enter = async () => {\n    try {\n      setTransactionError(undefined);\n      const tx = await _lotto.enter({ value: ethers.utils.parseEther(\"1\") });\n      setTxBeingSent(tx.hash);\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction Failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      setTransactionError(error);\n    } finally {\n      setTxBeingSent(undefined);\n    }\n  }\n\n  const _draw = async () => {\n    try {\n      setTransactionError(undefined);\n      const tx = await _lotto.draw();\n      setTxBeingSent(tx.hash);\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction Failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      setTransactionError(error);\n    } finally {\n      _viewWinnings();\n      setTxBeingSent(undefined);\n    }\n  }\n\n  const _getPaid = async () => {\n    try {\n      setTransactionError(undefined);\n\n      const tx = await _lotto.getPaid();\n      setTxBeingSent(tx.hash);\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction Failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      setTransactionError(error);\n    } finally {\n      _viewWinnings();\n      setTxBeingSent(undefined);\n    }\n  }\n\n\n  if (window.ethereum === undefined) {\n    return <div>Wallet Disconnected.</div>;\n  }\n\n  return (\n   <div className=\"App app-background\">\n      <Container className=\"app-header\">\n        <Row className=\"pt-4\">\n          <Col>\n            <h1 className=\"app-title\">\n              FEELING LUCKY?\n            </h1>\n          </Col>\n          <Col className=\"text-right\">\n            <ConnectWallet \n              connectWallet={_connectWallet}\n              walletConnected={walletConnected}\n              walletAddress={selectedAddress}\n            />\n          </Col>\n        </Row>\n      </Container>\n      <Dashboard\n        walletConnected={walletConnected}\n        enterFunction={_enter}\n        drawFunction={_draw}\n        getPaidFunction={_getPaid}\n        viewWinningsFunction={_viewWinnings}\n        userBalance={balance}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n/*\nclass App extends React.Component <Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    this.initialState = {\n      lottoData: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      walletConnected: false,\n    };\n\n    this.state = this.initialState;\n\n    this._connectWallet = this._connectWallet.bind(this);\n    this._initializeEthers = this._initializeEthers.bind(this);\n    this._enter = this._enter.bind(this);\n    this._draw = this._draw.bind(this);\n    this._getPaid = this._getPaid.bind(this);\n    this._viewWinnings = this._viewWinnings.bind(this);\n  }\n\n  render() {\n\n    if (window.ethereum === undefined) {\n      return <div>No wallet connected.</div>;\n    }\n\n    return (\n     <div className=\"App app-background\">\n        <Container className=\"app-header\">\n          <Row className=\"pt-4\">\n            <Col>\n              <h1 className=\"app-title\">\n                FLotto\n              </h1>\n            </Col>\n            <Col className=\"text-right\">\n              <ConnectWallet \n                connectWallet={this._connectWallet}\n                walletConnected={this.state.walletConnected}\n                walletAddress={this.state.selectedAddress}\n              />\n            </Col>\n          </Row>\n        </Container>\n        <Dashboard\n          walletConnected={this.state.walletConnected}\n          enterFunction={this._enter}\n          drawFunction={this._draw}\n          getPaidFunction={this._getPaid}\n          viewWinningsFunction={this._viewWinnings}\n          userBalance={this._balance}\n        />\n      </div>\n    );\n  }\n\n  _initialize(userAddress:any) {\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n\n    this._initializeEthers();\n    this._getLottoData();\n  }\n\n  async _initializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    const signer = this._provider.getSigner(0);\n    const addr = await signer.getAddress();\n\n    this.lotto = new ethers.Contract(\n      contractAddress.Lotto,\n      LotteryArtifact.abi,\n      signer\n    );\n    this.setState({ selectedAddress: addr })\n  }\n\n  async _getLottoData() {\n    const name = \"Name\";\n    const symbol = \"Poop\";\n\n    this.setState({ lottoData: { name, symbol } });\n  }\n\n  async _updateEntries() {\n\n    console.log(this.state.lottoData);\n    const balance = await this.lotto.viewWinnings();\n    this.setState({ balance });\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n    this.setState({walletConnected: true});\n    //this._viewWinnings();\n    window.ethereum.on(\"accountsChanged\", ([newAddress]:any[]) => {\n      //this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    window.ethereum.on(\"networkChanged\", ([networkId]:any[]) => {\n      //this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _getRpcErrorMessage(error:any) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n\n  async _enter() {\n\n    try {\n      this._dismissTransactionError();\n\n      const tx = await this.lotto.enter({ value: ethers.utils.parseEther(\"1\") });\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _draw() {\n\n    try {\n      this._dismissTransactionError();\n\n      const tx = await this.lotto.draw();\n      this.setState({ txBeingSent: tx.hash });\n      this._viewWinnings();\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _getPaid() {\n\n    try {\n      this._dismissTransactionError();\n\n      const tx = await this.lotto.getPaid();\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _viewName() {\n      const name = await this.lotto.getPaid();\n      const receipt = await name.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewDrawFrequency() {\n      const drawFrequency = await this.lotto.viewDrawFrequency();\n      const receipt = await drawFrequency.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewTicketPrice() {\n      const ticketPrice = await this.lotto.viewTicketPrice();\n      const receipt = await ticketPrice.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewWinChance() {\n      const winChance = await this.lotto.viewWinChance();\n      const receipt = await winChance.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      //`Odds per ticket: 1/${winChance}`\n      // Arbitrary State Handling\n  }\n\n  async _viewCurrentLottery() {\n      const currentLottery = await this.lotto.viewCurrentLottery();\n      const receipt = await currentLottery.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewTicketHolders(_ticketID: string) {\n      const ticketHolders = await this.lotto.viewTicketHolders(_ticketID);\n      const receipt = await ticketHolders.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewTicketNumber(_ticketID: string) {\n      const ticketNumber = await this.lotto.viewTicketNumber(_ticketID);\n      const receipt = await ticketNumber.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewStartTime(lottoNumber: number) {\n      const startTime = await this.lotto.viewStartTime(lottoNumber);\n      const receipt = await startTime.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewLastDrawTime(lottoNumber: number) {\n      const lastDrawTime = await this.lotto.viewLastDrawTime(lottoNumber);\n      const receipt = await lastDrawTime.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewTotalPot(lottoNumber: number) {\n      const totalPot = await this.lotto.viewTotalPot(lottoNumber);\n      const receipt = await totalPot.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewWinningTicket(lottoNumber: number) {\n      const winningTicket = await this.lotto.viewWinningTicket(lottoNumber);\n      const receipt = await winningTicket.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewUserTicketList(lottoNumber: number) {\n      const userTicketList = await this.lotto.viewUserTicketList(lottoNumber);\n      const receipt = await userTicketList.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _readyToDraw() {\n      const ready = await this.lotto.readyToDraw();\n      const receipt = await ready.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"no data\");\n      }\n      // Arbitrary State Handling\n  }\n\n  async _viewWinnings() {\n    const balance = await this.lotto.viewWinnings();\n    const receipt = await balance.wait();\n    if (receipt.status === 0) {\n      throw new Error(\"no data\");\n    }\n    this._balance = ethers.utils.formatEther(balance);\n    this.setState({ balance });\n  }\n}\nexport default App;\n\n*/","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}